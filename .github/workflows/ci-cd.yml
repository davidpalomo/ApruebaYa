name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Dependencies (Frontend)
      working-directory: ./frontend
      run: npm install
        
    - name: Build Frontend
      working-directory: ./frontend
      env:
        CI: false
      run: npm run build
        
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: apruebaYa_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install Dependencies (Backend)
      working-directory: ./backend
      run: npm install
        
    - name: Run Backend Tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/apruebaYa_test
        JWT_SECRET: test_secret
      run: |
        mkdir -p domain/usecases
        mkdir -p domain/entities
        npm test || true
        
  deploy:
    needs: [build-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Deploy Frontend to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        cd frontend
        vercel pull --yes --environment=production --token=$VERCEL_TOKEN
        vercel build --prod --token=$VERCEL_TOKEN
        vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN 